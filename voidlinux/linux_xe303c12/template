# Template file for 'linux_xe303c12'
pkgname=linux_xe303c12
version=5.15.79
revision=1
wrksrc="linux-${version}"
short_desc="Linux kernel and modules and headers (${version%.*} for XE303C12 armv7hf samsung/google-snow Chromebook)"
maintainer="none"
license="GPL-2.0-only"
homepage="https://www.kernel.org"
distfiles="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${version}.tar.xz"
checksum=cba39031dbc0eed0785b8afdc8c58cf23df83e47001b2354fa44486ae699c154
python_version=3
patch_args="-Np1"

#export XBPS_TARGET_CFLAGS=" -O2 -pipe -march=armv7-a -mfpu=neon-vfpv4 --param l1-cache-size=64 --param l2-cache-size=1024 -fno-plt -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize -floop-interchange -floop-unroll-and-jam -fpeel-loops -funswitch-loops -fvect-cost-model=dynamic -fsimd-cost-model=dynamic -fsplit-ivs-in-unroller -ftree-loop-ivcanon -ftree-loop-im "
export XBPS_TARGET_CFLAGS=" -O2 -pipe -march=armv7-a -mfpu=neon-vfpv4 --param l1-cache-size=64 --param l2-cache-size=1024 -ftracer -funroll-loops -fprefetch-loop-arrays -fpredictive-commoning -fsel-sched-reschedule-pipelined "
export XBPS_MAKEJOBS=$(grep 'model name' /proc/cpuinfo --count)

# XXX Restrict archs until a proper <arch>-dotconfig is available in FILESDIR.
archs="arm*"

nodebug=yes  
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes
preserve=yes

hostmakedepends="tar xz bc elfutils-devel flex gmp-devel kmod libmpc-devel
openssl-devel perl uboot-mkimage vboot-utils dtc cpio pahole git zstd"

depends+="vboot-utils uboot-mkimage"
 
_kernver="${version}_${revision}"
triggers="kernel-hooks"
kernel_hooks_version="${_kernver}"

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

do_configure() {
	# 5.8 misses Documentation/DocBook. We ship the directory from 4.12 here.
	# cp -a $FILESDIR/DocBook -t Documentation

	# If there's a file called <arch>-dotconfig, use it to
	# configure the kernel; otherwise use arch defaults and all stuff
	# as modules (allmodconfig).
	local arch subarch _args
	
	# apply patches in a specific way

	cp $FILESDIR/patch-5.15-rc7-armv7-x7.diff ../
	echo $(git apply ../patch-5.15-rc7-armv7-x7.diff)
		rm -f ../patch-5.15-rc7-armv7-x7.diff
	cp $FILESDIR/0004-fix-mvsdio-eMMC-timing.patch ../
	git apply ../0004-fix-mvsdio-eMMC-timing.patch
		rm -f ../0004-fix-mvsdio-eMMC-timing.patch

	arch=arm

	if [ "$CROSS_BUILD" ]; then
		_args="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
	fi

	if [ -f ${FILESDIR}/${subarch:-$arch}-dotconfig-custom ]; then
		msg_normal "Detected a custom .config file for your arch, using it.\n"
		cp -f ${FILESDIR}/${subarch:-$arch}-dotconfig-custom .config
		make ${makejobs} ARCH=$arch ${_args} oldconfig
	elif [ -f ${FILESDIR}/${subarch:-$arch}-dotconfig ]; then
		msg_normal "Detected a .config file for your arch, using it.\n"
		cp -f ${FILESDIR}/${subarch:-$arch}-dotconfig .config
		make ${makejobs} ARCH=$arch ${_args} oldconfig
	elif [ -f ${FILESDIR}/${XBPS_TARGET_MACHINE%%-musl}-dotconfig ]; then
		msg_normal "Detected a .config file for your cpu family, using it.\n"
		cp -f ${FILESDIR}/${XBPS_TARGET_MACHINE%%-musl}-dotconfig .config
		make ${makejobs} ARCH=$arch ${_args} oldconfig
	else
		msg_normal "Defaulting to 'allmodconfig'.\n"
		make ${makejobs} ARCH=$arch ${_args} allmodconfig
	fi
	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version.
	sed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_${revision}\"|" .config
}

do_build() {
	local arch _cross _args
	_args="zImage modules dtbs"
	arch=arm
    
	if [ "$CROSS_BUILD" ]; then
		_cross="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
	fi
	if [ "${_patchver}" ]; then
		_version="EXTRAVERSION=${_patchver}"
	fi

	# force some hw-specific optimizations
	for tmpcycle in $(find -name Makefile | grep -v 'scripts/'); do
        #sed -i "s/armv7-a/armv7-a -O2 -mfpu=neon-vfpv4 --param l1-cache-size=64 --param l2-cache-size=1024 -fno-plt -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize -floop-interchange -floop-unroll-and-jam -fpeel-loops -funswitch-loops -fvect-cost-model=dynamic -fsimd-cost-model=dynamic -fsplit-ivs-in-unroller -ftree-loop-ivcanon -ftree-loop-im /g" $tmpcycle
        sed -i "s/armv7-a/armv7-a+mp+neon-vfpv4  --param l1-cache-size=64 --param l2-cache-size=1024 -O2 -ftracer /g" $tmpcycle
        sed -i "s/vfpv /vfpv4 /g" $tmpcycle
        sed -i "s/vfpv,/vfpv4,/g" $tmpcycle
        sed -i "s/-Os/-O2/g" $tmpcycle
        sed -i "s/-O2/-O2 --param l1-cache-size=64 --param l2-cache-size=1024 -ftracer -funroll-loops -fprefetch-loop-arrays -fpredictive-commoning -fsel-sched-reschedule-pipelined /g" $tmpcycle
        #sed -i "s/-O2/-O2 -pipe --param l1-cache-size=64 --param l2-cache-size=1024 -fno-plt -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize -floop-interchange -floop-unroll-and-jam -fpeel-loops -funswitch-loops -fvect-cost-model=dynamic -fsimd-cost-model=dynamic -fsplit-ivs-in-unroller -ftree-loop-ivcanon -ftree-loop-im /g" $tmpcycle
	done
	
	export LDFLAGS=
	make ARCH=$arch ${_version} ${_cross} ${makejobs} prepare
	make ARCH=$arch ${_version} ${_cross} ${makejobs} ${_args}
}

do_install() {
	local arch subarch _args hdrdest
	arch=arm

	# Run depmod after compressing modules.
	sed -i '2iexit 0' scripts/depmod.sh

	# Install kernel, firmware and modules
	make ${makejobs} ARCH=${subarch:-$arch} INSTALL_MOD_PATH=${DESTDIR} modules_install

	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

	vinstall .config 644 boot config-${_kernver}
	vinstall System.map 644 boot System.map-${_kernver}

    vinstall arch/arm/boot/zImage 644 boot
    #make ${makejobs} ARCH=${subarch:-$arch} INSTALL_DTBS_PATH=${DESTDIR}/boot/dtbs/dtbs-${_kernver} dtbs_install
    #make ${makejobs} ARCH=${subarch:-$arch} INSTALL_DTBS_PATH=${DESTDIR}/boot/dtbs dtbs_install
    mkdir -p ${DESTDIR}/boot/dtbs
    vinstall arch/arm/boot/dts/exynos5250-snow.dtb 755 boot/dtbs/
    vinstall arch/arm/boot/dts/exynos5250-snow-rev5.dtb 755 boot/dtbs/
    mkdir -p ${DESTDIR}/boot/resign
    cp ${FILESDIR}/kernel.keyblock ${DESTDIR}/boot/resign/kernel.keyblock
    cp ${FILESDIR}/kernel_data_key.vbprivk ${DESTDIR}/boot/resign/kernel_data_key.vbprivk
    
    cp ${FILESDIR}/kernel.its .
    cp ${FILESDIR}/kernel.keyblock .
    cp ${FILESDIR}/kernel_data_key.vbprivk .
    mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg
    dd if=/dev/zero of=bootloader.bin bs=512 count=1
    echo 'console=tty0 init=/usr/bin/runit-init root=PARTUUID=%U/PARTNROFF=1 rootwait rw noinitrd zswap.compressor=zstd zswap.max_pool_percent=40 audit=0 quiet loglevel=1 ' > cmdline
    vbutil_kernel \
        --pack kernel_image \
        --version 1 \
        --vmlinuz vmlinux.uimg \
        --arch arm \
        --keyblock kernel.keyblock \
        --signprivate kernel_data_key.vbprivk \
        --config cmdline \
        --bootloader bootloader.bin
    vinstall kernel_image 644 boot
    
    vinstall ${FILESDIR}/post-install 755 etc/kernel.d/post-install 10-flashkernel
    
	# Switch to /usr.
	vmkdir usr
	mv ${DESTDIR}/lib ${DESTDIR}/usr

	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/kernel-headers-${_kernver} build

	cd ${wrksrc}
	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 .config ${hdrdest}/.config
	for file in $(find . -name Kconfig\*); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	for file in $(find arch/${subarch:-$arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	mkdir -p ${hdrdest}/include
	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	for i in $(ls include/); do
			cp -a include/$i ${hdrdest}/include
	done

	cd ${wrksrc}
	mkdir -p ${hdrdest}/arch/${arch}
	cp -a arch/${arch}/include ${hdrdest}/arch/${arch}

	# Remove helper binaries built for host,
	# if generated files from the scripts/ directory need to be included,
	# they need to be copied to ${hdrdest} before this step
	if [ "$CROSS_BUILD" ]; then
		make ${makejobs} ARCH=${subarch:-$arch} _mrproper_scripts
		# remove host specific objects as well
		find scripts -name '*.o' -delete
	fi

	# Copy files necessary for later builds, like nvidia and vmware
	cp Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}
	mkdir -p ${hdrdest}/security/selinux
	cp -a security/selinux/include ${hdrdest}/security/selinux
	mkdir -p ${hdrdest}/tools/include
	cp -a tools/include/tools ${hdrdest}/tools/include

	mkdir -p ${hdrdest}/arch/${arch}/kernel
	cp arch/${arch}/Makefile ${hdrdest}/arch/${arch}
	if [ "$subarch" = "i386" ]; then
		mkdir -p ${hdrdest}/arch/x86
		cp arch/x86/Makefile_32.cpu ${hdrdest}/arch/x86
	fi
	if [ "$arch" = "x86" ]; then
		mkdir -p ${hdrdest}/arch/x86/kernel
		cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel
	elif [ "$arch" = "arm64" ]; then
		mkdir -p ${hdrdest}/arch/arm64/kernel
		cp -a arch/arm64/kernel/vdso ${hdrdest}/arch/arm64/kernel/
	fi

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# Add xfs and shmem for aufs building
	mkdir -p ${hdrdest}/fs/xfs/libxfs
	mkdir -p ${hdrdest}/mm
	cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	# Remove unneeded architectures
    _args="x86* p*"

	for arch in alpha avr32 blackfin cris frv h8300 \
		ia64 m* s* um v850 xtensa ${_args}; do
		rm -rf ${hdrdest}/arch/${arch}
	done
	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
	mkdir -p ${hdrdest}/arch/x86/ras
	cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}
